#https://easyinit.readthedocs.io/en/latest/maps.html#functionmap

!EvalModel  								#Provides values by evaluating another easi tree.
parameters: [Omega, eCS, b_xx, b_yy, b_zz, b_xy, b_yz, b_xz]
model: !Switch
  #This does not effect the calculations
  [Omega]: !FunctionMap   						#Implements a mapping described by an ImpalaJIT function.
  #zStressDecreaseStart = -33km; why stress decrease from here?
  #zStressDecreaseStop = -37km; (end of seismogenic zone), this should be the total depth of our fault  
  #zStressDecreaseWidth  = 4km
  #if -33000<=z  => Omega = 1; 
  #if -37000<=z<-33000  => Omega = 1-S_x, where S_x = 3*a^2 -2*a^3, a = 1 - (z+37000)/4000;
  #if z<-37000 => Omega =0.001
    map:
      Omega: |
       zStressDecreaseStart = -33000.;	  
       zStressDecreaseStop = -37000.;		
       zStressDecreaseWidth = zStressDecreaseStart - zStressDecreaseStop;   
       if  (z>=zStressDecreaseStart) {
          return 1.0;
       } else {
          if (z>=zStressDecreaseStop) {
             a = 1.0-(z-zStressDecreaseStop)/zStressDecreaseWidth;
             Sx = (3.0*a*a-2.0*a*a*a);
             return 1.0-Sx;
          } else {
            return 0.001;
          }
       }
  [b_xx, b_yy, b_zz, b_xy, b_yz, b_xz]: !EvalModel
    parameters: [sig_zz,S]
    model: !FunctionMap
    #intial fluid pressure ratio is high, indicate fluid aboundancy
      map:
        sig_zz: |
          return 2670.0*(1.0-0.95)*9.8*min(-5000.0,z);  
        S: |
          R = 0.7;
          return (1.0/R-1.0);
    components: !AndersonianStress   	#This function allows computing Andersonian stresses
      constants:
        mu_d:      0.1
        mu_s:      0.6
        SH_max:   132.0
        cohesion:  0.0
        s2ratio:   0.5
        S_v: 1
  [eCS]: !FunctionMap
    map:
      #avoid positive stress above z=0
      #Same as sig_zz?
      eCS: |
        return 2670.0*(1.0-0.95)*9.8*min(-5000.0,z);
components: !FunctionMap #implements a mapping described by an ImpalaJIT function.
  map:
    s_xx:     return Omega*b_xx + (1.0-Omega)*eCS;
    s_yy:     return Omega*b_yy + (1.0-Omega)*eCS;
    s_zz:     return Omega*b_zz + (1.0-Omega)*eCS;
    s_xy:     return Omega*b_xy;
    s_yz:     return Omega*b_yz;
    s_xz:     return Omega*b_xz;
